import { PluginObj } from "@babel/core"
import {
  CallExpression,
  isIdentifier,
  ObjectExpression,
  StringLiteral,
  Identifier,
  ObjectProperty,
  objectProperty,
  memberExpression,
  callExpression,
  stringLiteral,
  identifier
} from "@babel/types"

type PluginOptions = {
  taggerName: string
}

const defaultPluginOptions: PluginOptions = {
  taggerName: "_cultureamp$elm_css_modules_loader$CssModules$CssModule"
}

/**
 * The shape of the CSS modules call expression generated by the Elm compiler.
 *
 * e.g. `A2(author$project$CssModules$css, './Main.css', { xx: 'someClass' });`
 */
type CssModuleExpressionArguments = [
  Identifier,
  StringLiteral,
  ObjectExpression
]

const makePlugin = (options: PluginOptions): PluginObj => ({
  name: "elm-css-modules-plugin",
  visitor: {
    CallExpression: ({ node }) => {
      if (!isCssModuleExpression(node, options.taggerName)) return

      const [
        taggerIdNode,
        filePathNode,
        classMapNode
      ] = node.arguments as CssModuleExpressionArguments

      classMapNode.properties = classMapNode.properties.map(
        transformClassMapProperty(filePathNode.value)
      )
    }
  }
})

/**
 * The shape of a pre-transformed elm-css-modules CSS module object property,
 *
 * e.g. `xx: 'someClass'`
 */
interface ClassMapProperty extends ObjectProperty {
  key: Identifier
  value: StringLiteral
}

/**
 * Takes the path to a CSS file and returns a function which transforms
 * properties on the associated CSS modules map (as a POJO) output by the
 * Elm compiler into a member-accessed `require` expression for that CSS file.
 *
 * e.g. `xx: 'someClass'` -> `xx: require('./Main.css').someClass`
 */
const transformClassMapProperty = (filePath: string) => {
  return ({ key, value: classname }: ClassMapProperty) =>
    objectProperty(
      key,
      memberExpression(
        callExpression(identifier("require"), [stringLiteral(filePath)]),
        identifier(classname.value)
      )
    )
}

/**
 * Returns true if the call expression is a CSS module expression
 * produced by the Elm compiler via the Elm CSS modules package.
 */
const isCssModuleExpression = (
  expression: CallExpression,
  taggerIdName: string
) =>
  isIdentifier(expression.callee) &&
  expression.callee.name === "A2" &&
  isIdentifier(expression.arguments[0]) &&
  expression.arguments[0]["name"] === taggerIdName

export default makePlugin(defaultPluginOptions)

export { makePlugin as withOptions, defaultPluginOptions, PluginOptions }
